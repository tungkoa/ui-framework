import { Component } from '../component.js';
import { FC } from '../core.js';
export interface MatchPathOptions {
    exact?: boolean;
    path: string;
    regex?: {
        [param: string]: RegExp;
    };
}
export type MatchPathResult = {
    path: string | null;
    url: string;
    isExact: boolean;
    params: {
        [param: string]: string;
    };
} | null;
export declare const matchPath: (pathname: string, options: MatchPathOptions) => MatchPathResult;
export declare class Switch extends Component<{
    fallback?: any;
    children?: any;
}> {
    index: number;
    path: string;
    match: {
        index: number;
        path: string;
    };
    didMount(): void;
    didUnmount(): void;
    handleChanges(): void;
    findChild(): void;
    shouldUpdate(): boolean;
    render(): any;
}
export declare class Routes extends Switch {
}
export interface RouteProps {
    path: string;
    regex: {
        [param: string]: RegExp;
    };
    pathname: string;
    params: {
        [param: string]: string;
    };
}
export declare const Route: FC<{
    path: string;
    exact?: boolean;
    regex?: {
        [param: string]: RegExp;
    };
    children?: any;
}>;
export declare const to: (to: string, replace?: boolean) => void;
interface LinkProps {
    to: string;
    replace?: boolean;
    children?: any;
    [key: string]: any;
}
export declare const Link: FC<LinkProps>;
declare class CListener {
    private _route;
    private _listeners;
    constructor();
    use(): {
        subscribe: (fnc: (currPath: string, prevPath: string) => void) => void;
        cancel: () => void;
    };
}
export declare const Listener: () => CListener;
/** Pass "this.props.route.path" to it. */
export declare const parseParamsFromPath: (path: string) => {
    [param: string]: string;
};
export {};
//# sourceMappingURL=router.d.ts.map