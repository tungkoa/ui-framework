export declare class HTMLElementSSR {
    tagName: string;
    isSelfClosing: boolean;
    nodeType: null | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    private _ssr;
    constructor(tag: string);
    get outerHTML(): string;
    get innerHTML(): string;
    set innerHTML(text: string);
    get innerText(): string;
    set innerText(text: string);
    getAttribute(_name: any): null;
    get classList(): {
        add: (name: string) => void;
        entries: {
            readonly length: number;
        };
    };
    toString(): string;
    setAttributeNS(_namespace: string | null, name: string, value: string): void;
    setAttribute(name: string, value: string): void;
    append(child: any): void;
    appendChild(child: any): void;
    get children(): string[];
    addEventListener<K extends keyof DocumentEventMap>(_type: keyof K, _listener: (this: Document, ev: DocumentEventMap[K]) => any, _options?: boolean | AddEventListenerOptions | undefined): void;
}
export declare class DocumentSSR {
    body: HTMLElement;
    head: HTMLElement;
    constructor();
    createElement(tag: string): HTMLElement;
    createElementNS(_URI: string, tag: string): HTMLElement;
    createTextNode(text: string): string;
    querySelector(_query: string): undefined;
}
declare const documentSSR: () => Document;
export { documentSSR };
//# sourceMappingURL=regexDom.d.ts.map