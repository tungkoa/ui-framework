/// <reference types="node" />
import { Component } from '../component.js';
import { Store } from '../store.js';
import { Helmet } from '../components/helmet.js';
import { Link } from '../components/link.js';
import { Img } from '../components/img.js';
import { Visible } from '../components/visible.js';
import * as Router from '../components/router.js';
import * as UI from '../ui/index.js';
declare const _default: {
    Component: typeof Component;
    Fragment: (props: any) => any;
    Helmet: typeof Helmet;
    Img: typeof Img;
    Link: typeof Link;
    Router: typeof Router;
    Store: typeof Store;
    UI: typeof UI;
    Visible: typeof Visible;
    createContext: (ctx: any) => {
        Provider: (props: any) => any;
        Consumer: (props: any) => {
            component: any;
            props: any;
        };
        get: () => any;
        set: (ctx: any) => any;
    };
    h: (tagNameOrComponent: any, props?: any, ...children: any[]) => any;
    hydrate: (component: any, parent?: HTMLElement | null, removeChildNodes?: boolean) => any;
    hydrateLazy: (component: any, parent?: HTMLElement | null, removeChildNodes?: boolean) => any;
    jsx: (statics: TemplateStringsArray, ...rest: any[]) => any;
    nodeToString: (node: Node) => string;
    removeAllChildNodes: (parent: HTMLElement) => void;
    render: (component: any, parent?: HTMLElement | null, removeChildNodes?: boolean) => any;
    task: (task: () => void) => NodeJS.Timeout;
    tick: (cb: Function) => any;
    withStyles: any;
    defineAsCustomElements: (component: any, componentName: string, publicProps: string[], shadow?: ShadowRootInit | undefined) => void;
};
export default _default;
export { printVersion } from '../helpers.js';
export { VERSION } from '../version.js';
//# sourceMappingURL=bundle.full.d.ts.map