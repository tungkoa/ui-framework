{"code":"import { isSSR } from './core.js';\nexport class Store {\n    _state;\n    _prevState;\n    _listeners = new Map();\n    _storage;\n    _id;\n    /**\n     * Create your own Store.\n     * @param defaultState Pass the initial State.\n     * @param name The name of the Store (only required if you persist the state in localStorage or sessionStorage).\n     * @param storage Pass 'memory', 'local' or 'session'.\n     */\n    constructor(defaultState, name = '', storage = 'memory') {\n        if (isSSR())\n            storage = 'memory';\n        this._id = name;\n        this._storage = storage;\n        this._state = this._prevState = defaultState;\n        if (storage === 'memory' || !storage)\n            return;\n        const Storage = storage === 'local' ? localStorage : sessionStorage;\n        // get/set initial state of Storage\n        const item = Storage.getItem(this._id);\n        if (item) {\n            this._state = this._prevState = JSON.parse(item);\n        }\n        else\n            Storage.setItem(this._id, JSON.stringify(defaultState));\n    }\n    persist(newState) {\n        if (this._storage === 'memory')\n            return;\n        const Storage = this._storage === 'local' ? localStorage : sessionStorage;\n        Storage.setItem(this._id, JSON.stringify(newState));\n    }\n    /** Clears the state of the whole store. */\n    clear() {\n        // @ts-ignore\n        this._state = this._prevState = undefined;\n        if (this._storage === 'local')\n            localStorage.removeItem(this._id);\n        else if (this._storage === 'session')\n            sessionStorage.removeItem(this._id);\n    }\n    setState(newState) {\n        this.state = newState;\n    }\n    set state(newState) {\n        this._prevState = this._state;\n        this._state = newState;\n        this.persist(newState);\n        this._listeners.forEach(fnc => {\n            fnc(this._state, this._prevState);\n        });\n    }\n    get state() {\n        return this._state;\n    }\n    use() {\n        const id = Math.random().toString(36).substring(2, 9);\n        const _this = this;\n        return {\n            get state() {\n                return _this.state;\n            },\n            setState: (newState) => {\n                this.state = newState;\n            },\n            subscribe: (fnc) => {\n                this._listeners.set(id, fnc);\n            },\n            cancel: () => {\n                if (this._listeners.has(id))\n                    this._listeners.delete(id);\n            }\n        };\n    }\n}\n//# sourceMappingURL=store.js.map","references":["/Users/tungkoa/WebstormProjects/new-ui-framework/nano/src/core.ts"],"map":"{\"version\":3,\"file\":\"store.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/store.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"./node_modules/.cache/.rts2_cache_umd/placeholder/store.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"store.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/store.ts\"],\"names\":[],\"mappings\":\"AAEA,qBAAa,KAAK,CAAC,CAAC,GAAG,GAAG;IACxB,OAAO,CAAC,MAAM,CAAG;IACjB,OAAO,CAAC,UAAU,CAAG;IACrB,OAAO,CAAC,UAAU,CAAmC;IACrD,OAAO,CAAC,QAAQ,CAAgC;IAChD,OAAO,CAAC,GAAG,CAAQ;IAEnB;;;;;OAKG;gBACS,YAAY,EAAE,MAAM,EAAE,IAAI,GAAE,MAAW,EAAE,OAAO,GAAE,QAAQ,GAAG,OAAO,GAAG,SAAoB;IAmBvG,OAAO,CAAC,OAAO;IAMf,2CAA2C;IACpC,KAAK;IAQL,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAI3B,IAAW,KAAK,CAAC,QAAQ,EAAE,CAAC,EAS3B;IAED,IAAW,KAAK,IAAI,CAAC,CAEpB;IAEM,GAAG;;6BAOe,CAAC;oCAGM,CAAC,aAAa,CAAC,KAAK,IAAI;;;CAQzD\"}"},"dts":{"name":"./node_modules/.cache/.rts2_cache_umd/placeholder/store.d.ts","writeByteOrderMark":false,"text":"export declare class Store<S = any> {\n    private _state;\n    private _prevState;\n    private _listeners;\n    private _storage;\n    private _id;\n    /**\n     * Create your own Store.\n     * @param defaultState Pass the initial State.\n     * @param name The name of the Store (only required if you persist the state in localStorage or sessionStorage).\n     * @param storage Pass 'memory', 'local' or 'session'.\n     */\n    constructor(defaultState: Object, name?: string, storage?: 'memory' | 'local' | 'session');\n    private persist;\n    /** Clears the state of the whole store. */\n    clear(): void;\n    setState(newState: S): void;\n    set state(newState: S);\n    get state(): S;\n    use(): {\n        readonly state: S;\n        setState: (newState: S) => void;\n        subscribe: (fnc: (newState: S, prevState: S) => void) => void;\n        cancel: () => void;\n    };\n}\n//# sourceMappingURL=store.d.ts.map"}}
