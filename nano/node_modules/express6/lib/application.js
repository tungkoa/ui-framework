"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * Copyright(c) 2021 Yannick Deubel (https://github.com/yandeu)
 * MIT Licensed
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Express = void 0;
const utils_js_1 = require("./utils.js");
const events_1 = require("events");
const utils_js_2 = require("./utils.js");
const index_js_1 = require("./router/index.js");
const view_js_1 = require("./view.js");
const debug_1 = __importDefault(require("debug"));
const finalhandler_1 = __importDefault(require("finalhandler"));
const array_flatten_1 = require("array-flatten");
const http_1 = __importDefault(require("http"));
const utils_merge_1 = __importDefault(require("utils-merge"));
const methods_1 = __importDefault(require("methods"));
const path_1 = require("path");
const debug = (0, debug_1.default)('express:application');
const slice = Array.prototype.slice;
/** Variable for trust proxy inheritance back-compat */
const trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';
class Express extends utils_js_2.ExtensibleFunction {
    constructor() {
        super((req, res, next) => {
            return this.handle(req, res, next);
        });
        this.cache = {};
        this.engines = {};
        this.settings = {};
    }
    /**
     * Initialize the server.
     *
     *   - setup default configuration
     *   - setup default middleware
     *   - setup route reflection methods
     */
    init() {
        this.cache = {};
        this.engines = {};
        this.settings = {};
        this.defaultConfiguration();
    }
    /** Initialize application configuration. */
    defaultConfiguration() {
        const env = process.env.NODE_ENV || 'development';
        // default settings
        this.enable('x-powered-by');
        this.set('etag', 'weak');
        this.set('env', env);
        this.set('query parser', 'extended');
        this.set('subdomain offset', 2);
        this.set('trust proxy', false);
        // trust proxy inherit back-compat
        Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
            configurable: true,
            value: true
        });
        debug('booting in %s mode', env);
        this.on('mount', function onmount(parent) {
            // inherit trust proxy
            if (this.settings[trustProxyDefaultSymbol] === true && typeof parent.settings['trust proxy fn'] === 'function') {
                delete this.settings['trust proxy'];
                delete this.settings['trust proxy fn'];
            }
            // inherit protos
            Object.setPrototypeOf(this.request, parent.request);
            Object.setPrototypeOf(this.response, parent.response);
            Object.setPrototypeOf(this.engines, parent.engines);
            Object.setPrototypeOf(this.settings, parent.settings);
        });
        // setup locals
        this.locals = Object.create(null);
        // top-most app is mounted at /
        this.mountpath = '/';
        // default locals
        this.locals.settings = this.settings;
        // default configuration
        this.set('view', view_js_1.View);
        this.set('views', (0, path_1.resolve)('views'));
        this.set('jsonp callback name', 'callback');
        if (env === 'production') {
            this.enable('view cache');
        }
        // deprecated
        // see: https://github.com/expressjs/express/commit/8c6f9c42531e0fc5f85981484588d569cca26f63
        /* Object.defineProperty(this, 'router', {
          get: function () {
            throw new Error(
              "'app.router' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app."
            )
          }
        }) */
    }
    /** Getting lazily added base router. */
    get router() {
        if (!this._router) {
            this._router = new index_js_1.Router({
                caseSensitive: this.enabled('case sensitive routing'),
                strict: this.enabled('strict routing')
            });
        }
        return this._router;
    }
    /**
     * Dispatch a req, res pair into the application. Starts pipeline processing.
     *
     * If no callback is provided, then default error handlers will respond
     * in the event of an error bubbling through the stack.
     */
    handle(req, res, callback) {
        const router = this.router;
        // final handler
        const done = callback ||
            (0, finalhandler_1.default)(req, res, {
                env: this.get('env'),
                onerror: logerror.bind(this)
            });
        // no routes
        if (!router) {
            debug('no routes defined on app');
            done();
            return;
        }
        // set powered by header
        if (this.enabled('x-powered-by')) {
            res.setHeader('X-Powered-By', 'Express');
        }
        // set circular references
        req.res = res;
        res.req = req;
        // alter the prototypes
        // @ts-ignore
        req.__proto__ = this.request;
        // @ts-ignore
        res.__proto__ = this.response;
        // setup locals
        if (!res.locals) {
            res.locals = Object.create(null);
        }
        router.handle(req, res, done);
    }
    use(fn) {
        let offset = 0;
        let path = '/';
        // default path to '/'
        // disambiguate app.use([fn])
        if (typeof fn !== 'function') {
            let arg = fn;
            while (Array.isArray(arg) && arg.length !== 0) {
                arg = arg[0];
            }
            // first arg is the path
            if (typeof arg !== 'function') {
                offset = 1;
                path = fn;
            }
        }
        const fns = (0, array_flatten_1.flatten)(slice.call(arguments, offset));
        if (fns.length === 0) {
            throw new TypeError('app.use() requires a middleware function');
        }
        // setup router
        const router = this.router;
        const _this = this;
        fns.forEach(function (fn) {
            // non-express app
            if (!fn || !fn.handle || !fn.set) {
                return router.use(path, fn);
            }
            debug('.use app under %s', path);
            fn.mountpath = path;
            fn.parent = _this;
            // restore .app property on req and res
            router.use(path, function mounted_app(req, res, next) {
                const orig = req.app;
                fn.handle(req, res, function (err) {
                    Object.setPrototypeOf(req, orig.request);
                    Object.setPrototypeOf(res, orig.response);
                    next(err);
                });
            });
            // mounted an app
            fn.emit('mount', _this);
        }, this);
        return this;
    }
    /**
     * Proxy to the app `Router#route()`
     * Returns a new `Route` instance for the _path_.
     *
     * Routes are isolated middleware stacks for specific paths.
     * See the Route api docs for details.
     */
    route(path) {
        return this.router.route(path);
    }
    /**
     * Register the given template engine callback `fn`
     * as `ext`.
     *
     * By default will `require()` the engine based on the
     * file extension. For example if you try to render
     * a "foo.ejs" file Express will invoke the following internally:
     *
     *     app.engine('ejs', require('ejs').__express);
     *
     * For engines that do not provide `.__express` out of the box,
     * or if you wish to "map" a different extension to the template engine
     * you may use this method. For example mapping the EJS template engine to
     * ".html" files:
     *
     *     app.engine('html', require('ejs').renderFile);
     *
     * In this case EJS provides a `.renderFile()` method with
     * the same signature that Express expects: `(path, options, callback)`,
     * though note that it aliases this method as `ejs.__express` internally
     * so if you're using ".ejs" extensions you don't need to do anything.
     *
     * Some template engines do not follow this convention, the
     * [Consolidate.js](https://github.com/tj/consolidate.js)
     * library was created to map all of node's popular template
     * engines to follow this convention, thus allowing them to
     * work seamlessly within Express.
     */
    engine(ext, fn) {
        if (typeof fn !== 'function') {
            throw new Error('callback function required');
        }
        // get file extension
        const extension = ext[0] !== '.' ? `.${ext}` : ext;
        // store engine
        this.engines[extension] = fn;
        return this;
    }
    /**
     * Proxy to `Router#param()` with one added api feature. The _name_ parameter
     * can be an array of names.
     *
     * See the Router#param() docs for more details.
     */
    param(name, fn) {
        if (Array.isArray(name)) {
            for (let i = 0; i < name.length; i++) {
                this.param(name[i], fn);
            }
            return this;
        }
        this.router.param(name, fn);
        return this;
    }
    /**
     * Assign `setting` to `val`, or return `setting`'s value.
     *
     *    app.set('foo', 'bar');
     *    app.set('foo');
     *    // => "bar"
     *
     * Mounted servers inherit their parent server's settings.
     */
    set(setting, val) {
        if (arguments.length === 1) {
            // app.get(setting)
            return this.settings[setting];
        }
        debug('set "%s" to %o', setting, val);
        // set value
        this.settings[setting] = val;
        // trigger matched settings
        switch (setting) {
            case 'etag':
                this.set('etag fn', (0, utils_js_1.compileETag)(val));
                break;
            case 'query parser':
                this.set('query parser fn', (0, utils_js_1.compileQueryParser)(val));
                break;
            case 'trust proxy':
                this.set('trust proxy fn', (0, utils_js_1.compileTrust)(val));
                // trust proxy inherit back-compat
                Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
                    configurable: true,
                    value: false
                });
                break;
        }
        return this;
    }
    /**
     * Return the app's absolute pathname
     * based on the parent(s) that have
     * mounted it.
     *
     * For example if the application was
     * mounted as "/admin", which itself
     * was mounted as "/blog" then the
     * return value would be "/blog/admin".
     */
    path() {
        return this.parent ? this.parent.path() + this.mountpath : '';
    }
    /**
     * Check if `setting` is enabled (truthy).
     *
     *    app.enabled('foo')
     *    // => false
     *
     *    app.enable('foo')
     *    app.enabled('foo')
     *    // => true
     */
    enabled(setting) {
        return Boolean(this.set(setting));
    }
    /**
     * Check if `setting` is disabled.
     *
     *    app.disabled('foo')
     *    // => true
     *
     *    app.enable('foo')
     *    app.disabled('foo')
     *    // => false
     */
    disabled(setting) {
        return !this.set(setting);
    }
    /** Enable `setting`. */
    enable(setting) {
        return this.set(setting, true);
    }
    /** Disable `setting`. */
    disable(setting) {
        return this.set(setting, false);
    }
    /**
     * Special-cased "all" method, applying the given route `path`,
     * middleware, and callback to _every_ HTTP method.
     */
    all(path, ...handlers) {
        const route = this.router.route(path);
        for (let i = 0; i < methods_1.default.length; i++) {
            // eslint-disable-next-line prefer-spread
            route[methods_1.default[i]].apply(route, handlers);
        }
        return this;
    }
    /**
     * Render the given view `name` name with `options`
     * and a callback accepting an error and the
     * rendered template string.
     *
     * Example:
     *
     *    app.render('email', { name: 'Tobi' }, function(err, html){
     *      // ...
     *    })
     */
    render(name, options, callback) {
        const cache = this.cache;
        let done = callback;
        const engines = this.engines;
        let opts = options;
        const renderOptions = {};
        let view;
        // support callback function as second arg
        if (typeof options === 'function') {
            done = options;
            opts = {};
        }
        // merge app.locals
        (0, utils_merge_1.default)(renderOptions, this.locals);
        // merge options._locals
        if (opts._locals) {
            (0, utils_merge_1.default)(renderOptions, opts._locals);
        }
        // merge options
        (0, utils_merge_1.default)(renderOptions, opts);
        // set .cache unless explicitly provided
        if (renderOptions.cache == null) {
            renderOptions.cache = this.enabled('view cache');
        }
        // primed cache
        if (renderOptions.cache) {
            view = cache[name];
        }
        // view
        if (!view) {
            const View = this.get('view');
            view = new View(name, {
                defaultEngine: this.get('view engine'),
                root: this.get('views'),
                engines: engines
            });
            if (!view.path) {
                const dirs = Array.isArray(view.root) && view.root.length > 1
                    ? `directories "${view.root.slice(0, -1).join('", "')}" or "${view.root[view.root.length - 1]}"`
                    : `directory "${view.root}"`;
                const err = new Error(`Failed to lookup view "${name}" in views ${dirs}`);
                // @ts-ignore
                err.view = view;
                return done(err);
            }
            // prime the cache
            if (renderOptions.cache) {
                cache[name] = view;
            }
        }
        // render
        tryRender(view, renderOptions, done);
    }
    listen(...args) {
        const server = http_1.default.createServer(this);
        return server.listen(...args);
    }
}
exports.Express = Express;
/** Delegate `.VERB(...)` calls to `router.VERB(...)`. */
methods_1.default.forEach(function (method) {
    Express.prototype[method] = function (...path) {
        if (method === 'get' && arguments.length === 1) {
            // app.get(setting)
            return this.set(path[0]);
        }
        const route = this.router.route(path[0]);
        // eslint-disable-next-line prefer-spread
        route[method].apply(route, slice.call(path, 1));
        return this;
    };
});
/**
 * Log error using console.error.
 *
 * @param {Error} err
 * @private
 */
function logerror(err) {
    /* istanbul ignore next */
    if (this.get('env') !== 'test')
        console.error(err.stack || err.toString());
}
/**
 * Try rendering a view.
 * @private
 */
function tryRender(view, options, callback) {
    try {
        view.render(options, callback);
    }
    catch (err) {
        callback(err);
    }
}
(0, utils_js_1.applyMixins)(Express, [events_1.EventEmitter]);
exports.default = Express;
//# sourceMappingURL=application.js.map