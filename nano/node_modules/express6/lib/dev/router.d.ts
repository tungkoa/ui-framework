import { NextFunction, RequestHandler, Request, Response } from '../types.js';
import { ExtensibleFunction } from '../utils.js';
declare type Path = string | RegExp;
declare type Method = string;
declare type RouterPaths = {
    path: Path[];
    method: Method;
    handler: HandlerCtx | RequestHandler;
    isMiddleware: boolean;
};
export interface HandlerCtx {
    (c: {
        req: Request;
        res: Response;
        next: NextFunction;
    }): void;
}
export declare class Router extends ExtensibleFunction<RequestHandler> {
    route: string;
    children: Router[];
    paths: RouterPaths[];
    private _isChild;
    constructor(route: string);
    get isChild(): boolean;
    toTree(): any[];
    handle(req: Request, res: Response, next: NextFunction): Promise<void>;
    handler(req: Request, res: Response, next: NextFunction): Promise<void>;
    private registerRoute;
    GET(path: Path, handler: HandlerCtx | RequestHandler): void;
    use(path: Path, handler: RequestHandler): void;
    use(handler: RequestHandler): void;
    add(...router: Router[]): void;
}
export {};
