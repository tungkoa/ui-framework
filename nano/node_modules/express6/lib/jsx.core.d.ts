export interface FC<P = {}> {
    (props: P): Element | void;
}
/** Creates a new Microtask using Promise() */
export declare const tick: (<TResult1 = any, TResult2 = never>(onfulfilled?: ((value: any) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>) | typeof setTimeout;
export declare const removeAllChildNodes: (parent: HTMLElement) => void;
export declare const strToHash: (s: string) => string;
export declare const appendChildren: (element: HTMLElement | SVGElement, children: HTMLElement[]) => void;
/** Returns the populated parent if available else  one child or an array of children */
export declare const render: (component: any, parent?: HTMLElement | null, removeChildNodes?: boolean) => any;
export declare const _render: (comp: any) => any;
export declare const h: (tagNameOrComponent: any, props: any, ...children: any) => any;
