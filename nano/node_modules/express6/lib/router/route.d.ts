/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * Copyright(c) 2021 Yannick Deubel (https://github.com/yandeu)
 * MIT Licensed
 */
import { NextFunction, Request, Response } from '../types.js';
/**
 * Initialize `Route` with the given `path`,
 *
 * @param {String} path
 * @public
 */
export declare class Route {
    path: any;
    stack: any[];
    methods: any;
    constructor(path: string);
    /** Determine if the route handles a given method. */
    private _handles_method;
    /**
     * @return {Array} supported HTTP methods
     * @private
     */
    _options(): string[];
    /** dispatch req, res into this route */
    dispatch(req: Request, res: Response, done: NextFunction): any;
    /**
     * Add a handler for all HTTP verbs to this route.
     *
     * Behaves just like middleware and can respond or call `next`
     * to continue processing.
     *
     * You can use multiple `.all` call to add multiple handlers.
     *
     *   function check_something(req, res, next){
     *     next();
     *   };
     *
     *   function validate_user(req, res, next){
     *     next();
     *   };
     *
     *   route
     *   .all(validate_user)
     *   .all(check_something)
     *   .get(function(req, res, next){
     *     res.send('hello world');
     *   });
     *
     * @param {function} handler
     * @return {Route} for chaining
     * @api public
     */
    all(): this;
}
