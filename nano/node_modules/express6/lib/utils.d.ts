/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * Copyright(c) 2021 Yannick Deubel (https://github.com/yandeu)
 * MIT Licensed
 */
interface TMP {
    originalIndex?: number;
    params: {
        [key: string]: string;
    };
    quality?: number;
    value: string;
}
/**
 * Return strong ETag for `body`.
 *
 * @param {String|Buffer} body
 * @param {String} [encoding]
 * @return {String}
 * @api private
 */
export declare const etag: Function;
/**
 * Return weak ETag for `body`.
 *
 * @param {String|Buffer} body
 * @param {String} [encoding]
 * @return {String}
 * @api private
 */
export declare const wetag: Function;
/** Normalize the given `type`, for example "html" becomes "text/html". */
export declare const normalizeType: (type: string) => TMP;
/** Normalize `types`, for example "html" becomes "text/html". */
export declare const normalizeTypes: (types: string[]) => TMP[];
/** Compile "etag" value to function. */
export declare const compileETag: (val: boolean | string | Function) => Function;
/** Compile "query parser" value to function. */
export declare const compileQueryParser: (val: boolean | string | Function) => Function;
/** Compile "proxy trust" value to function. */
export declare const compileTrust: (val: string | string[] | boolean | Function) => Function;
/**
 * Set the charset in a given Content-Type string.
 *
 * @param {String} type
 * @param {String} charset
 * @return {String}
 * @api private
 */
export declare const setCharset: (type: string, charset: string) => string;
export declare class ExtensibleFunction<T> extends Function {
    constructor(f: T);
}
export declare const applyMixins: (derivedCtor: any, constructors: any[]) => void;
export {};
