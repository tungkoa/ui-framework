"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * Copyright(c) 2021 Yannick Deubel (https://github.com/yandeu)
 * MIT Licensed
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.View = void 0;
const path_1 = require("path");
const debug_1 = __importDefault(require("debug"));
const fs_1 = __importDefault(require("fs"));
const debug = (0, debug_1.default)('express:view');
/**
 * Initialize a new `View` with the given `name`.
 *
 * Options:
 *
 *   - `defaultEngine` the default template engine name
 *   - `engines` template engine require() cache
 *   - `root` root path for view lookup
 */
class View {
    constructor(name, options) {
        this.defaultEngine = options.defaultEngine;
        this.ext = (0, path_1.extname)(name);
        this.name = name;
        this.root = options.root;
        if (!this.ext && !this.defaultEngine) {
            throw new Error('No default engine was specified and no extension was provided.');
        }
        let fileName = name;
        if (!this.ext) {
            // get extension from default engine name
            this.ext = this.defaultEngine[0] !== '.' ? `.${this.defaultEngine}` : this.defaultEngine;
            fileName += this.ext;
        }
        if (!options.engines[this.ext]) {
            // load engine
            const mod = this.ext.substring(1);
            debug('require "%s"', mod);
            // default engine export
            const fn = require(mod).__express;
            if (typeof fn !== 'function') {
                throw new Error(`Module "${mod}" does not provide a view engine.`);
            }
            options.engines[this.ext] = fn;
        }
        // store loaded engine
        this.engine = options.engines[this.ext];
        // lookup path
        this.path = this.lookup(fileName);
    }
    /** Lookup view by the given `name` */
    lookup(name) {
        let path;
        const roots = [].concat(this.root);
        debug('lookup "%s"', name);
        for (let i = 0; i < roots.length && !path; i++) {
            const root = roots[i];
            // resolve the path
            const loc = (0, path_1.resolve)(root, name);
            const dir = (0, path_1.dirname)(loc);
            const file = (0, path_1.basename)(loc);
            // resolve the file
            path = this.resolve(dir, file);
        }
        return path;
    }
    /** Render with the given options. */
    render(options, callback) {
        let sync = true;
        debug('render "%s"', this.path);
        // render, normalizing sync callbacks
        const ctx = this;
        this.engine(this.path, options, function onRender() {
            if (!sync) {
                return callback.apply(ctx, arguments);
            }
            // copy arguments
            const args = new Array(arguments.length);
            for (let i = 0; i < arguments.length; i++) {
                args[i] = arguments[i];
            }
            // force callback to be async
            return process.nextTick(function renderTick() {
                return callback.apply(ctx, args);
            });
        });
        sync = false;
    }
    /** Resolve the file within the given directory. */
    resolve(dir, file) {
        const ext = this.ext;
        // <path>.<ext>
        let path = (0, path_1.join)(dir, file);
        let stat = tryStat(path);
        if (stat && stat.isFile()) {
            return path;
        }
        // <path>/index.<ext>
        path = (0, path_1.join)(dir, (0, path_1.basename)(file, ext), `index${ext}`);
        stat = tryStat(path);
        if (stat && stat.isFile()) {
            return path;
        }
    }
}
exports.View = View;
/** Return a stat, maybe. */
function tryStat(path) {
    debug('stat "%s"', path);
    try {
        return fs_1.default.statSync(path);
    }
    catch (e) {
        return undefined;
    }
}
//# sourceMappingURL=view.js.map