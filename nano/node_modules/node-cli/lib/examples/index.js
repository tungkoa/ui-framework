"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const elements_1 = require("../elements");
const components_1 = require("../jsx/components");
const cli_1 = require("../cli");
const messages_1 = require("../messages");
const core_1 = require("../jsx/core");
const fragment_1 = require("../jsx/fragment");
const loading_1 = require("../jsx/components/loading");
const readline_1 = __importDefault(require("readline"));
let isMainMenu = true;
let answer;
let index = 0;
let canExit = true;
const main = async () => {
    answer = undefined;
    isMainMenu = true;
    await cli_1.clearDisplay();
    cli_1.write(core_1.h(elements_1.Gray, null, "node-cli examples:"));
    const options = [
        'Yes/No',
        'Write Answer',
        'Select',
        'Multi Select',
        'Tabs',
        'Progress Bar',
        'Loading Spinner',
        'Text',
        'List',
        'Table',
        'Link'
    ];
    index = await core_1.render(core_1.h(components_1.Select, { question: "Select an example", options: options, index: index }));
    if (typeof index !== 'undefined') {
        isMainMenu = false;
        await cli_1.clearDisplay();
        switch (options[index]) {
            case 'Yes/No':
                answer = await core_1.render(core_1.h(components_1.YesNo, { question: "Simple yes or no question" }));
                break;
            case 'Write Answer':
                answer = await core_1.render(core_1.h(components_1.Write, { question: "Tell Me what's on your mind" }));
                break;
            case 'Select':
                answer = await core_1.render(core_1.h(components_1.Select, { question: "Select one color", options: ['Blue', 'Red', 'Green', 'Yellow', 'Black'] }));
                break;
            case 'Multi Select':
                answer = await core_1.render(core_1.h(components_1.MultiSelect, { question: "Select your menu", options: ['Pizza', 'Pasta', 'Nuggets', 'Burger'] }));
                break;
            case 'Tabs':
                await core_1.render(core_1.h(components_1.Tabs, { tabs: ['one', 'two', 'three'], onChange: d => onTabsChangeHandler(d) }));
                break;
            case 'Progress Bar':
                canExit = false;
                await progressBar();
                canExit = true;
                break;
            case 'Loading Spinner':
                canExit = false;
                await loadingSpinner();
                canExit = true;
                break;
            case 'Text':
                cli_1.write(core_1.h(fragment_1.Fragment, null,
                    core_1.h(elements_1.Text, { color: "red" }, "red"),
                    core_1.h("br", null),
                    core_1.h(elements_1.Text, { background: "blue" }, "blue"),
                    core_1.h("br", null),
                    core_1.h(elements_1.Text, { underline: true }, "underline")));
                break;
            case 'List':
                cli_1.write(core_1.h(fragment_1.Fragment, null,
                    core_1.h("h1", null, "Unordered List:"),
                    core_1.h("ul", null,
                        core_1.h("li", null, "one"),
                        core_1.h("li", null, "two")),
                    core_1.h("br", null),
                    core_1.h("h1", null, "Ordered List:"),
                    core_1.h("ol", null,
                        core_1.h("li", null, "one"),
                        core_1.h("li", null, "two"))));
                break;
            case 'Table':
                cli_1.write(core_1.h("table", null,
                    core_1.h("tr", null,
                        core_1.h("th", null, "Names"),
                        core_1.h("th", null, "Age")),
                    core_1.h("tr", null,
                        core_1.h("td", null, "Joe"),
                        core_1.h("td", null, "49")),
                    core_1.h("tr", null,
                        core_1.h("td", null, "Mila"),
                        core_1.h("td", null, "42"))));
                break;
            case 'Link':
                cli_1.write(core_1.h("p", null,
                    core_1.h("h1", null, "Check the source code of this example:"),
                    core_1.h("a", { href: "https://github.com/yandeu/node-cli/blob/main/src/examples/index.tsx" }, "GitHub Repo")));
                break;
            default:
            // code block
        }
    }
    cli_1.write('');
    if (typeof answer !== 'undefined')
        messages_1.step('Answer:', answer);
    messages_1.comment('Crtl+C to go back');
};
/**
 * Hide Cursor
 */
cli_1.hideCursor();
/**
 * Listen for inputs
 */
readline_1.default.emitKeypressEvents(process.stdin);
process.stdin.setRawMode(true);
process.stdin.on('keypress', (str, key) => {
    // "Raw" mode so we must do our own kill switch (ctrl + c)
    if (key.sequence === '\u0003' && canExit) {
        if (!isMainMenu) {
            setTimeout(() => {
                main();
            });
        }
        else {
            setTimeout(() => {
                cli_1.showCursor();
                process.exit(0);
            });
        }
    }
});
main();
/**
 * Progress Bar
 */
const progressBar = () => {
    let progress = 0;
    const steps = 133;
    const fps = 30;
    let time = steps / fps;
    const render = () => {
        const ETA = `${Math.round(time)}s`;
        const bar = core_1.h(components_1.Progress, { progress: (progress / steps) * 100, comment: `| ETA: ${ETA} | ${progress}/${steps} ` });
        cli_1.clear(2).then(() => {
            cli_1.write(bar);
        });
    };
    return new Promise(resolve => {
        const interval = setInterval(() => {
            progress++;
            time -= 1 / fps;
            render();
            if (progress >= steps) {
                clearInterval(interval);
                cli_1.clear(2).then(() => {
                    return resolve();
                });
            }
        }, 1000 / fps);
    });
};
/**
 * Loading Spinner
 */
const loadingSpinner = () => {
    return new Promise(resolve => {
        let frame = 0;
        const interval = setInterval(() => {
            frame++;
            if (frame > 100) {
                clearInterval(interval);
                return resolve();
            }
            cli_1.clear(1).then(() => {
                cli_1.write(core_1.h(loading_1.Loading, { frame: frame }, "Loading..."));
            });
        }, 1000 / 60);
    });
};
/**
 * Handle Tabs Changing
 */
const onTabsChangeHandler = async (data) => {
    await cli_1.clearDisplay();
    cli_1.write(data.tabs);
    cli_1.write(''); // empty line
    cli_1.write('Content nr. ', data.index);
    cli_1.write('');
    messages_1.comment('Crtl+C to go back');
};
