"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiSelect = void 0;
const elements_1 = require("../../../elements");
const inputComponent_1 = require("../../inputComponent");
const cli_1 = require("../../../cli");
const messages_1 = require("../../../messages");
const core_1 = require("../../core");
const symbols_1 = require("../../../symbols");
class MultiSelect extends inputComponent_1.InputComponent {
    constructor() {
        super(...arguments);
        this._index = 0;
        this._selected = [];
    }
    printOptions() {
        this.props.options.forEach((option, i) => {
            const isSelected = this._selected.includes(i);
            let symbol = symbols_1.symbols.largeCircle;
            let text = option;
            if (i === this._index) {
                text = elements_1.code('modifier', 'underline', text);
                symbol = symbols_1.symbols.fisheye;
            }
            if (isSelected) {
                symbol = symbols_1.symbols.squareRoot;
                text = core_1.h(elements_1.Green, null, text);
                symbol = core_1.h(elements_1.Green, null, symbol);
            }
            cli_1.write(`${symbol} ${text}`);
        });
    }
    onKeyPress(str, key) {
        if (key.name === 'up' && this._index > 0) {
            this._index--;
            cli_1.clear(this.props.options.length).then(() => {
                this.printOptions();
            });
        }
        if (key.name === 'down' && this._index < this.props.options.length - 1) {
            this._index++;
            cli_1.clear(this.props.options.length).then(() => {
                this.printOptions();
            });
        }
        if (key.name === 'space') {
            if (!this._selected.includes(this._index))
                this._selected.push(this._index);
            else {
                const i = this._selected.indexOf(this._index);
                this._selected = [...this._selected.slice(0, i), ...this._selected.slice(i + 1)];
            }
            cli_1.clear(this.props.options.length).then(() => {
                this.printOptions();
            });
        }
        if (key.name === 'return')
            this.exit(this._selected);
        return;
    }
    start() {
        if (this.props.question)
            messages_1.question(this.props.question, '(select with space)');
        this.printOptions();
    }
}
exports.MultiSelect = MultiSelect;
