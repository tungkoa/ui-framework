"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = void 0;
const elements_1 = require("../../../elements");
const inputComponent_1 = require("../../inputComponent");
const cli_1 = require("../../../cli");
const messages_1 = require("../../../messages");
const core_1 = require("../../core");
class Select extends inputComponent_1.InputComponent {
    constructor() {
        super(...arguments);
        this._index = 0;
    }
    _start() {
        if (this.props.index)
            this._index = this.props.index;
        super._start();
    }
    printOptions(_clear) {
        const output = [];
        this.props.options.forEach((option, i) => {
            if (i === this._index)
                output.push(messages_1.step(core_1.h(elements_1.Blue, null, option), false));
            else
                output.push(`  ${option}`);
        });
        if (_clear) {
            cli_1.clear(this.props.options.length).then(() => {
                cli_1.write(output.join('\n'));
            });
        }
        else {
            cli_1.write(output.join('\n'));
        }
    }
    onKeyPress(str, key) {
        if (key.name === 'up' && this._index > 0) {
            this._index--;
            this.printOptions(true);
        }
        if (key.name === 'down' && this._index < this.props.options.length - 1) {
            this._index++;
            this.printOptions(true);
        }
        if (key.name === 'return')
            this.exit(this._index);
        return;
    }
    start() {
        if (this.props.question)
            messages_1.question(this.props.question, '(use arrow keys)');
        this.printOptions(true);
    }
}
exports.Select = Select;
