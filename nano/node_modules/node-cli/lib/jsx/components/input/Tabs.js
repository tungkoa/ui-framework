"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tabs = void 0;
const inputComponent_1 = require("../../inputComponent");
const fragment_1 = require("../../fragment");
const elements_1 = require("../../../elements");
const core_1 = require("../../core");
class Tabs extends inputComponent_1.InputComponent {
    constructor() {
        super(...arguments);
        this._index = 0;
    }
    onKeyPress(str, key) {
        const exits = ['escape', 'return'];
        if (exits.includes(key.name))
            this.exit(this._index);
        if (key.name === 'tab' || key.name === 'right') {
            this._index++;
            this.updateTabs();
        }
        if (key.name === 'left') {
            this._index--;
            this.updateTabs();
        }
        return;
    }
    updateTabs() {
        // adjust index
        if (this._index > this.props.tabs.length - 1)
            this._index = 0;
        if (this._index < 0)
            this._index = this.props.tabs.length - 1;
        // send index and tabs
        this.props.onChange({ index: this._index, tabs: this.printTabs() });
    }
    printTabs() {
        let tabs = '';
        this.props.tabs.forEach((tab, i) => {
            if (i !== this._index)
                tabs += core_1.h(elements_1.Gray, null, tab);
            else
                tabs += tab;
            if (i < this.props.tabs.length - 1)
                tabs += ' | ';
        });
        return core_1.h(fragment_1.Fragment, null,
            "\u256D\u2500 ",
            tabs,
            " \u2500\u2500\u2500\u2500\u2500\u2500\u256E");
    }
    start() {
        // send index and tabs
        this.props.onChange({ index: this._index, tabs: this.printTabs() });
    }
}
exports.Tabs = Tabs;
