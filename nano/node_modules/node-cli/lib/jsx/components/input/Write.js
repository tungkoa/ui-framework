"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Write = void 0;
const elements_1 = require("../../../elements");
const inputComponent_1 = require("../../inputComponent");
const cli_1 = require("../../../cli");
const messages_1 = require("../../../messages");
const core_1 = require("../../core");
const symbols_1 = require("../../../symbols");
class Write extends inputComponent_1.InputComponent {
    constructor(props) {
        var _a;
        super(props);
        this._prompt = '';
        this._placeholder = '';
        this.str = this.getPrompt();
        this._placeholder = (_a = this.props.placeholder) !== null && _a !== void 0 ? _a : 'write';
        this._placeholder = core_1.h(elements_1.Gray, null, this._placeholder);
        this.str += this._placeholder;
    }
    getPrompt() {
        var _a;
        this._prompt = (_a = this.props.prompt) !== null && _a !== void 0 ? _a : core_1.h(elements_1.Blue, null,
            symbols_1.symbols.heavyRightAngle1,
            " ");
        return this._prompt;
    }
    onKeyPress(str, key) {
        if (!str)
            return;
        // remove placeholder
        if (this._placeholder.length > 0) {
            this.str = this.getPrompt();
            this._placeholder = '';
        }
        if (key.name === 'return')
            return this.exit(this.str.slice(this._prompt.length));
        if (key.name === 'backspace') {
            if (this.str.length <= this._prompt.length)
                return;
            this.str = this.str.slice(0, -1);
        }
        else {
            this.str += str;
        }
        cli_1.clear(1).then(() => {
            cli_1.write(this.str);
        });
        return;
    }
    start() {
        if (this.props.question)
            messages_1.question(this.props.question, '(write your answer)');
        cli_1.write(this.str);
    }
}
exports.Write = Write;
