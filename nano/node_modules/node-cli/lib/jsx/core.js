"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = exports.h = exports._tick = void 0;
const utils_1 = require("./utils");
const elements_1 = require("../elements");
const code_1 = require("../utils/code");
exports._tick = 0;
let _styles = {};
const h = (tag, props, ...children) => {
    let text = children.join('');
    if (utils_1.isClass(tag))
        return { isClass: true, tag, props, children: text };
    if (utils_1.isFunction(tag))
        return tag({ ...props, children: text });
    // NEEDS IMPROVEMENT:
    if (props && props.class) {
        const c = _styles[props.class];
        if (c) {
            if (c.color)
                text = code_1.code('color', c.color, text);
            if (c.background)
                text = code_1.code('background', c.background, text);
        }
    }
    if (tag === 'i')
        return code_1.code('modifier', 'italic', text);
    if (tag === 'b')
        return code_1.code('modifier', 'bold', text);
    if (tag === 'u')
        return code_1.code('modifier', 'underline', text);
    if (tag === 's')
        return code_1.code('modifier', 'strikethrough', text);
    if (tag === 'br')
        return '\n';
    if (['p', 'div', 'h1', 'h2', 'h3', 'h4'].includes(tag))
        return `${text}\n`;
    if (tag === 'hr')
        return `\n${new Array(process.stdout.columns)
            .fill(null)
            .map(() => 'â€•')
            .join('')}\n`;
    if (tag === 'a')
        return exports.h(elements_1.Blue, null, utils_1.link(text, props.href));
    if (tag === 'ol')
        return utils_1.list(true, children);
    if (tag === 'ul')
        return utils_1.list(false, children);
    if (tag === 'tr')
        return children;
    if (tag === 'table')
        return utils_1.table(children);
    // todo  blockquote button progress code  table ul ol li
    return `${tag} ${text}`;
};
exports.h = h;
const render = async (element, options = {}) => {
    const { styles } = options;
    _styles = styles || {};
    exports._tick++;
    if (element.isClass) {
        const { tag, props, children } = element;
        const c = new element.tag({ ...props, children });
        await c._start();
        return new Promise((resolve, reject) => {
            c.start();
            c._exit = (data) => {
                return resolve(data);
            };
            c._error = (err) => {
                return reject(err);
            };
        });
    }
    else if (typeof element === 'function') {
        // TODO(yandeu): change this (maybe)
        return element();
    }
    else {
        return element;
    }
};
exports.render = render;
