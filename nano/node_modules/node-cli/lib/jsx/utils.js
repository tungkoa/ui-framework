"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.table = exports.list = exports.link = exports.isFunction = exports.isClass = exports._styles = void 0;
const utils_1 = require("../utils");
const supportsHyperlink_1 = require("../utils/supportsHyperlink");
const cli_1 = require("../cli");
exports._styles = {};
const isClass = (func) => {
    return typeof func === 'function' && /^class\s/.test(Function.prototype.toString.call(func));
};
exports.isClass = isClass;
const isFunction = (func) => {
    return typeof func === 'function';
};
exports.isFunction = isFunction;
// https://github.com/sindresorhus/ansi-escapes/blob/main/index.js
const link = (text, url) => {
    const linkSupported = supportsHyperlink_1.supportsHyperlink(process.stdout);
    const ESC = '\u001B[';
    const OSC = '\u001B]';
    const BEL = '\u0007';
    const SEP = ';';
    return [OSC, '8', SEP, SEP, url, BEL, linkSupported ? text : url, OSC, '8', SEP, SEP, BEL].join('');
};
exports.link = link;
// NEEDS IMPROVEMENT(yandeu):
const list = (ordered, children) => {
    const elements = children.map((c) => c.replace(/^li /gm, ''));
    return elements
        .map((el, nr) => {
        return ordered ? ` ${nr + 1}. ${el}\n` : ` • ${el}\n`;
    })
        .join('');
    // .replace(/\n$/, '')
};
exports.list = list;
// NEEDS IMPROVEMENT(yandeu):
const table = (children) => {
    const chars = {
        top: '─',
        topMid: '┬',
        topLeft: '┌',
        topRight: '┐',
        bottom: '─',
        bottomMid: '┴',
        bottomLeft: '└',
        bottomRight: '┘',
        left: '│',
        leftMid: '├',
        mid: '─',
        midMid: '┼',
        right: '│',
        rightMid: '┤',
        middle: '│'
    };
    const truncate = '…';
    const rows = children;
    cli_1.write(utils_1.code('color', 'gray', '(this component is not finished yet)'));
    cli_1.write('');
    const t = `${rows
        .map((column) => {
        return `${column
            .map((data) => {
            const text = /^th/.test(data) ? utils_1.code('modifier', 'bold', data.substring(3).trim()) : data.substring(3).trim();
            return `${text} |`;
        })
            .join(' ')}\n`;
    })
        .join('')}\n`;
    return t;
};
exports.table = table;
