"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddTag = void 0;
const utils_1 = require("../utils");
const component_1 = require("node-cli/lib/jsx/component");
const node_cli_1 = require("node-cli");
class AddTag extends component_1.Component {
    constructor() {
        super(...arguments);
        this.keyPress = (str, key) => {
            if (str === 'y')
                this.execute();
            if (str === 'n')
                this.exit(false);
            return;
        };
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            const tag = `git tag "v${this.props.version}"`;
            utils_1.stepComment(tag);
            yield utils_1.exec(tag, true);
            this.exit(true);
        });
    }
    start() {
        this.keyPress = this.keyPress.bind(this);
        process.stdin.on('keypress', this.keyPress);
        node_cli_1.question(`Add git tag "v${this.props.version}"`, '(y/n)');
    }
    onExit() {
        process.stdin.removeListener('keypress', this.keyPress);
    }
}
exports.AddTag = AddTag;
