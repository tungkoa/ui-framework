"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecuteHooks = void 0;
const node_cli_1 = require("node-cli");
const utils_1 = require("../utils");
const component_1 = require("node-cli/lib/jsx/component");
class ExecuteHooks extends component_1.Component {
    constructor() {
        super(...arguments);
        this.scripts = [];
        this.keyPress = (str, key) => {
            if (str === 'y')
                this.execute();
            if (str === 'n')
                this.exit();
            return;
        };
    }
    onExit() {
        process.stdin.removeListener('keypress', this.keyPress);
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            process.stdin.removeListener('keypress', this.keyPress);
            if (this.scripts.length === 0)
                return this.exit();
            for (const script of this.scripts) {
                utils_1.stepComment(`Running "${script}"`);
                yield utils_1.exec(script, true);
            }
            this.exit();
        });
    }
    start() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const pkg = yield utils_1.readPkg();
            const hook = this.props.hook;
            node_cli_1.question('Run the following scripts', '(y/n)');
            if (!pkg || !pkg.scripts[hook]) {
                utils_1.stepComment(`No ${hook} found`);
                this.exit();
                return;
            }
            this.keyPress = this.keyPress.bind(this);
            process.stdin.on('keypress', this.keyPress);
            const hooks = (_a = pkg.scripts[hook]) === null || _a === void 0 ? void 0 : _a.split(' ');
            if (!Array.isArray(hooks)) {
                utils_1.stepComment(`No ${hook} found`);
                this.exit();
                return;
            }
            node_cli_1.write(hooks
                .map(hook => {
                const script = `npm run ${hook}`;
                this.scripts.push(script);
                return `  â€¢ ${script}`;
            })
                .join('\n'));
        });
    }
}
exports.ExecuteHooks = ExecuteHooks;
