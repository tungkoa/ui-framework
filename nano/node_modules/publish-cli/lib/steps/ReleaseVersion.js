"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReleaseVersion = void 0;
const node_cli_1 = require("node-cli");
const component_1 = require("node-cli/lib/jsx/component");
const core_1 = require("node-cli/lib/jsx/core");
const inc_1 = __importDefault(require("semver/functions/inc"));
class ReleaseVersion extends component_1.Component {
    constructor() {
        super(...arguments);
        this.text = '';
        this.state = 'ask';
        this._selected = 0;
        this._options = ['No', 'Major', 'Minor', 'Patch', 'Custom'];
        this.listener = (str, key) => {
            this.keyPress(str, key);
        };
    }
    question() {
        node_cli_1.question(`Release a new version (currently ${this.props.version})`, '(use arrow keys)');
    }
    options() {
        this._options.forEach((option, index) => {
            if (index > 0 && index < 4) {
                option += ` (${inc_1.default(this.props.version, option.toLocaleLowerCase())})`;
            }
            const selected = (core_1.h(node_cli_1.Blue, null,
                node_cli_1.symbols.arrow,
                " ",
                option));
            const notSelected = `  ${option}`;
            node_cli_1.write(index === this._selected ? selected : notSelected);
        });
    }
    processAnswers() {
        // no
        if (this._selected === 0)
            this.exit('no');
        // custom
        else if (this._selected === 4) {
            this.state = 'write';
            node_cli_1.write('Write: ');
        }
        // update version
        else {
            const v = this._options[this._selected].toLocaleLowerCase();
            const ver = inc_1.default(this.props.version, v);
            this.exit(ver);
        }
    }
    keyPress(str, key) {
        if (this.state === 'write') {
            if (!str)
                return;
            if (key.name === 'return')
                return this.exit(this.text);
            if (key.name === 'backspace')
                this.text = this.text.slice(0, -1);
            else
                this.text += str;
            node_cli_1.clear(1).then(() => {
                node_cli_1.write(this.text);
            });
            return;
        }
        if (key.name === 'return') {
            this.processAnswers();
        }
        if (key.name === 'up' && this._selected > 0) {
            this._selected--;
            node_cli_1.clear(this._options.length).then(() => {
                this.options();
            });
        }
        if (key.name === 'down' && this._selected < this._options.length - 1) {
            this._selected++;
            node_cli_1.clear(this._options.length).then(() => {
                this.options();
            });
        }
    }
    onExit() {
        process.stdin.removeListener('keypress', this.listener);
    }
    start() {
        this.listener = this.listener.bind(this);
        process.stdin.on('keypress', this.listener);
        this.question();
        this.options();
    }
}
exports.ReleaseVersion = ReleaseVersion;
