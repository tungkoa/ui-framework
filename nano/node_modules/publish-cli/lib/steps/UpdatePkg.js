"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdatePkg = void 0;
const node_cli_1 = require("node-cli");
const utils_1 = require("../utils");
const component_1 = require("node-cli/lib/jsx/component");
class UpdatePkg extends component_1.Component {
    constructor() {
        super(...arguments);
        this.keyPress = (str, key) => {
            if (str === 'y')
                this.updatePkg();
            if (str === 'n')
                this.exit();
            return;
        };
    }
    updatePkg() {
        return __awaiter(this, void 0, void 0, function* () {
            utils_1.stepComment('reading package.json');
            const pkg = (yield utils_1.readPkg());
            utils_1.stepComment(`update version from ${pkg.version} to ${this.props.version}`);
            pkg.version = this.props.version;
            utils_1.stepComment('write package.json');
            yield utils_1.writePkg(pkg);
            this.exit();
        });
    }
    onExit() {
        process.stdin.removeListener('keypress', this.keyPress);
    }
    start() {
        this.keyPress = this.keyPress.bind(this);
        process.stdin.on('keypress', this.keyPress);
        node_cli_1.question(`Update package.json to version ${this.props.version}`, '(y/n)');
    }
}
exports.UpdatePkg = UpdatePkg;
