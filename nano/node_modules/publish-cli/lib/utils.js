"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writePkg = exports.readPkg = exports.exec = exports.stepComment = exports.PACKAGE_NAME = void 0;
const node_cli_1 = require("node-cli");
const child_process_1 = require("child_process");
const fragment_1 = require("node-cli/lib/jsx/fragment");
const path_1 = require("path");
const promises_1 = __importDefault(require("fs/promises"));
const core_1 = require("node-cli/lib/jsx/core");
exports.PACKAGE_NAME = 'publish-cli';
const stepComment = (str) => {
    node_cli_1.comment(core_1.h(fragment_1.Fragment, null,
        core_1.h(node_cli_1.Blue, null, 'â • '),
        core_1.h(node_cli_1.Gray, null, str)));
};
exports.stepComment = stepComment;
const executeCommand = (cmd, silent = false) => {
    return new Promise((resolve, reject) => {
        child_process_1.exec(cmd, {}, (err, stdout, stderr) => {
            if (err)
                return reject(err);
            if (!silent && stdout)
                node_cli_1.write(stdout);
            if (!silent && stderr)
                node_cli_1.write(stderr);
            resolve();
        });
    });
};
const exec = (cmd, silent) => __awaiter(void 0, void 0, void 0, function* () {
    yield executeCommand(cmd, silent).catch(err => node_cli_1.error(err.message));
});
exports.exec = exec;
const readPkg = (path = `${path_1.resolve()}/package.json`) => __awaiter(void 0, void 0, void 0, function* () {
    const pkg = yield promises_1.default.readFile(path, { encoding: 'utf8' }).catch(err => node_cli_1.error(err.message));
    if (pkg)
        return JSON.parse(pkg);
});
exports.readPkg = readPkg;
const writePkg = (pkg, path = `${path_1.resolve()}/package.json`) => __awaiter(void 0, void 0, void 0, function* () {
    yield promises_1.default.writeFile(path, JSON.stringify(pkg, null, 2), { encoding: 'utf8' }).catch(err => node_cli_1.error(err.message));
});
exports.writePkg = writePkg;
