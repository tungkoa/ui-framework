"use strict";
/**
 * quick testing section
 */
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../");
const router_1 = require("../router");
const nodeFetch_1 = require("../../scripts/nodeFetch");
const postRouterI = new router_1.Router();
const routeI = postRouterI.route;
const postRouterII = new router_1.Router();
const routeII = postRouterII.route;
routeII.get('/', () => {
    return 'routeII';
});
routeI.get('/get', _ => {
    return 'hello from posts';
});
routeI.get('/', _ => {
    return 'routeI /';
});
routeI.child('/child', postRouterII);
routeI.get('/:id', ctx => {
    return 'post id:' + ctx.req.params.id;
});
routeI.get('/:id/from/:user', ctx => {
    const { id, user } = ctx.req.params;
    return 'id:' + id + ' user:' + user;
});
routeII.get('/get', () => {
    return 'routeII get';
});
const main = async () => {
    const server = new __1.TinyServerHttp();
    const route = server.route;
    route.get('/get', ctx => {
        return 'hello';
    });
    route.get('/', ctx => {
        return 'root';
    });
    route.child('/posts', postRouterI);
    route.get('/:some', ctx => {
        return;
    });
    route.get('/another', ctx => {
        return 'another';
    });
    await server.listen(8080);
    console.log('HTTP: http://localhost:8080/');
    console.log('HTTPS: https://localhost:8080/');
    // test
    const tests = [];
    const t = async (path, shouldBe) => {
        const response = await (0, nodeFetch_1.nodeFetch)(`http://localhost:8080${path}`, { http2Stream: false, unsafe: false });
        tests.push('> TEST: ' + path + ' ' + (response.body === shouldBe).toString());
    };
    setTimeout(async () => {
        await t('/', 'root');
        await t('/get', 'hello');
        await t('/another', 'another');
        await t('/posts', 'routeI /');
        await t('/posts/get', 'hello from posts');
        await t('/posts/child', 'routeII');
        await t('/posts/child/get', 'routeII get');
        // :params
        await t('/posts/1234', 'post id:1234');
        await t('/posts/1234/from/yannick', 'id:1234 user:yannick');
        // regex
        await t('/posts/1234', 'post id:1234');
        console.log('TEST RESULT:');
        tests.forEach(t => {
            console.log(t);
        });
    }, 200);
};
setTimeout(() => {
    main();
}, 1000);
//# sourceMappingURL=dev.router.js.map