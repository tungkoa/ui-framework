"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serveExplorer = void 0;
const promises_1 = require("fs/promises");
const path_1 = require("path");
const helpers_1 = require("../helpers");
const styles = `
<style>
html {
  margin: 0;
  padding: 0;
}
body {
  font-family: ${helpers_1.fontFamily};
  margin: 0;
  padding: 2.5% 5%;
}
h1 {
  margin-left: 24px;
  margin-bottom: 36px;
  font-size: 26px;
}
p.not-found {
  margin-left: 24px;
  font-size: 20px;
}
ul {
  display: flex;
  flex-direction: column;
  list-style: none;
}
li {
  padding: 4px 0px;
}
li::before {
  content: "\\2022";
  color: black;
  display: inline-block;
  width: 1em;
  margin-left: -1em;
}
li.directory::before {
  font-weight:bold;
  content: "/";
}
a {
  color: blue;
  text-decoration: none;
}
a:hover {
  text-decoration: underline;
}
</style>`;
const send404Page = (req, res) => {
    try {
        const html = `
  ${styles}
  <h1>${req.url.split('/').join(' / ')}</h1>
  <p class="not-found" style="margin: 0px; position: absolute; top: 40%;left: 50%; transform: translate(-50%, -50%);">
    <span style="font-size: 36px; font-weight: bold;">
      404
    </span>
    <span style="
      margin-left: 14px;
      margin-right: 16px;
      border-left: 1px black solid;
      font-size: 36px;
      position: relative;
      top: 0px;"
    >
    </span>
    <span style="position: relative; top: -1px;">
      not found
    </span>
  </p>
 `;
        return res.send.html((0, helpers_1.makeHtml)(html));
    }
    catch (err) {
        return err;
    }
};
const serveExplorer = (config = {}) => {
    const { dotFiles = false, notFound = true } = config;
    return async (req, res, next) => {
        try {
            if (req.method !== 'GET')
                return next();
            const absolutePath = (0, path_1.join)((0, path_1.resolve)(), req.url);
            const stats = await (0, promises_1.stat)(absolutePath);
            // isFile()
            if (await (stats === null || stats === void 0 ? void 0 : stats.isFile())) {
                return res.send.file(absolutePath);
            }
            // isDirectory()
            else if (await (stats === null || stats === void 0 ? void 0 : stats.isDirectory())) {
                let files = await (0, promises_1.readdir)(absolutePath);
                if (!dotFiles)
                    files = files.filter(f => !(0, path_1.basename)(f).startsWith('.'));
                const html = `
        ${styles}
        <h1>~ ${req.url.split('/').join(' / ')}</h1>
        <ul>
          ${files
                    .sort((a, b) => {
                    if (!(0, path_1.extname)(a) && !(0, path_1.extname)(b))
                        return 0;
                    if (!(0, path_1.extname)(a))
                        return -1;
                    else
                        return 1;
                })
                    .map(f => {
                    const url = `${req.url}/${f}`.replace(/\/+/gm, '/');
                    return `<li class="${!(0, path_1.extname)(f) ? 'directory' : ''}"><a href="${url}">${f}</a></li>`;
                })
                    .join('')}
        </ul>`;
                return res.send.html((0, helpers_1.makeHtml)(html));
            }
            next();
        }
        catch (err) {
            // notFound is true
            if (notFound) {
                const err = send404Page(req, res);
                if (err)
                    return next();
            }
            return next();
        }
    };
};
exports.serveExplorer = serveExplorer;
//# sourceMappingURL=serveExplorer.js.map