"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestHttp2 = exports.Request = void 0;
const http_1 = require("http");
const http2_1 = require("http2");
class RequestBase {
    constructor() {
        this.params = {};
    }
}
class Request extends http_1.IncomingMessage {
    // TODO(yandeu): untrust proxy by default
    get ip() {
        var _a, _b;
        return ((_a = this.headers['x-forwarded-for']) === null || _a === void 0 ? void 0 : _a.split(',').shift()) || ((_b = this.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress) || '';
    }
}
exports.Request = Request;
class RequestHttp2 extends http2_1.Http2ServerRequest {
    // TODO(yandeu): untrust proxy by default
    get ip() {
        var _a, _b;
        return ((_a = this.headers['x-forwarded-for']) === null || _a === void 0 ? void 0 : _a.split(',').shift()) || ((_b = this.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress) || '';
    }
}
exports.RequestHttp2 = RequestHttp2;
applyMixins(Request, [RequestBase]);
applyMixins(RequestHttp2, [RequestBase]);
// This can live anywhere in your codebase:
function applyMixins(derivedCtor, constructors) {
    constructors.forEach(baseCtor => {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
            Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name) || Object.create(null));
        });
    });
}
//# sourceMappingURL=request.js.map