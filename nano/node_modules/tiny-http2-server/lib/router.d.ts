import { LoggerOptions, ServeExplorerConfig } from '.';
import { Request } from './request';
import { Response } from './response';
import type { Handler, Method, Path, Route, UseMiddleware } from './types';
export declare class Router {
    /** The relative root route of this Router */
    private _relativeRoot;
    /** The absolute root route of this Router */
    private _absoluteRoot;
    /** Array of all routes of this Router */
    private _routes;
    /** The children router (if it has some) */
    private _children;
    /** The parent router (if it has one) */
    private _parent;
    /** Traverse all down all children and from there traverse up all parents and adjust the _absoluteRoot */
    adjustAbsoluteRoot(): void;
    get route(): {
        use: UseMiddleware;
        child: (path: string, router: Router) => void;
        add: (method: Method, path: Path, handler: Handler) => void;
        any: (path: Path, handler: Handler) => void;
        get: (path: Path, handler: Handler) => void;
        patch: (path: Path, handler: Handler) => void;
        post: (path: Path, handler: Handler) => void;
        put: (path: Path, handler: Handler) => void;
        delete: (path: Path, handler: Handler) => void;
        static: (path: Path, absolutePath: string) => void;
        logger: (options?: LoggerOptions | undefined) => void;
        explorer: (config?: ServeExplorerConfig | undefined) => void;
    };
    get routes(): {
        add: (route: Handler | Route) => void;
    };
    handle(req: Request, res: Response): Promise<void>;
}
//# sourceMappingURL=router.d.ts.map