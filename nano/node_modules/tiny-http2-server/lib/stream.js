"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stream = void 0;
const helpers_1 = require("./helpers");
const response_1 = require("./response");
/** Makes http2 stream compatible with http/https response. */
class Stream extends response_1.ResponseBase {
    constructor(stream) {
        super();
        this.stream = stream;
        this.finished = false;
        this.statusCode = 200;
        this._headers = {};
        // overwrites
        this.send.file = this._sendFile;
    }
    /** Backwards compatibility with http v1 */
    get headersSent() {
        return this.finished;
    }
    /**
     *
     * @example
     * response.setHeader('Content-Type', 'text/html; charset=utf-8');
     *
     * response.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);
     */
    setHeader(header, ...value) {
        this._headers = { ...this._headers, [header]: value };
    }
    status(statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    __send(body, contentType = 'text/plain') {
        this.finished = true;
        this.stream.respond({
            ...this._headers,
            'content-type': contentType,
            ':status': 200
        });
        this.stream.end(body);
    }
    /**
     * Send a file.
     * Pass a relativePath (without leading slash) or an absolute path
     *
     * @example
     * // absolute path
     * res.send.file(join(resolve(), 'assets/styles.css')))
     * // relative path
     * res.send.file('assets/styles.css')
     */
    // overwrites this.send.file()
    async _sendFile(filePath) {
        if ((await (0, helpers_1.isFile)(filePath)) === false)
            return;
        const statCheck = (stat, headers) => {
            headers['last-modified'] = stat.mtime.toUTCString();
        };
        const contentType = (0, helpers_1.mime)(filePath);
        this.finished = true;
        this.stream.respondWithFile(filePath, {
            ...this._headers,
            'content-type': contentType
        }, { statCheck });
    }
}
exports.Stream = Stream;
//# sourceMappingURL=stream.js.map