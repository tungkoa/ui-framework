/// <reference types="node" />
import { Server as HttpServer } from 'http';
import { Server as HttpsServer } from 'https';
import { Http2SecureServer as Http2Server } from 'http2';
import { Request } from './request';
import { Response } from './response';
import { Router } from './router';
declare type Port = number;
export declare abstract class TinyServerBase<Srv extends HttpServer | HttpsServer | Http2Server, Req extends Request, Res extends Response> {
    router: Router;
    private server;
    private sockets;
    /** alias for this.router.route */
    r: {
        use: import("./types").UseMiddleware;
        child: (path: string, router: Router) => void;
        add: (method: import("./types").Method, path: import("./types").Path, handler: import("./types").Handler) => void;
        any: (path: import("./types").Path, handler: import("./types").Handler) => void;
        get: (path: import("./types").Path, handler: import("./types").Handler) => void;
        patch: (path: import("./types").Path, handler: import("./types").Handler) => void;
        post: (path: import("./types").Path, handler: import("./types").Handler) => void;
        put: (path: import("./types").Path, handler: import("./types").Handler) => void;
        delete: (path: import("./types").Path, handler: import("./types").Handler) => void;
        static: (path: import("./types").Path, absolutePath: string) => void;
        logger: (options?: import("./middleware").LoggerOptions | undefined) => void;
        explorer: (config?: import("./middleware").ServeExplorerConfig | undefined) => void;
    };
    /** alias for this.router.route */
    route: {
        use: import("./types").UseMiddleware;
        child: (path: string, router: Router) => void;
        add: (method: import("./types").Method, path: import("./types").Path, handler: import("./types").Handler) => void;
        any: (path: import("./types").Path, handler: import("./types").Handler) => void;
        get: (path: import("./types").Path, handler: import("./types").Handler) => void;
        patch: (path: import("./types").Path, handler: import("./types").Handler) => void;
        post: (path: import("./types").Path, handler: import("./types").Handler) => void;
        put: (path: import("./types").Path, handler: import("./types").Handler) => void;
        delete: (path: import("./types").Path, handler: import("./types").Handler) => void;
        static: (path: import("./types").Path, absolutePath: string) => void;
        logger: (options?: import("./middleware").LoggerOptions | undefined) => void;
        explorer: (config?: import("./middleware").ServeExplorerConfig | undefined) => void;
    };
    constructor();
    /**
     * Serve static files.
     * @param directory Has to be an absolute path.
     */
    static static(directory: string): import("./types").ExpressHandler;
    protected abstract createServer(): Srv;
    portIsFree(port: Port): Promise<boolean>;
    randomPort(): Promise<Port>;
    randomId(): string;
    listen(port?: Port): Promise<Port>;
    close(force?: boolean, timeout?: number): Promise<void>;
}
export {};
//# sourceMappingURL=tinyServer.base.d.ts.map