"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TinyServerHttp2 = exports.TinyServerHttps = exports.TinyServerHttp = void 0;
const fs_1 = require("fs");
const http_1 = require("http");
const https_1 = require("https");
const http2_1 = require("http2");
const request_1 = require("./request");
const response_1 = require("./response");
const stream_1 = require("./stream");
const tinyServer_base_1 = require("./tinyServer.base");
class TinyServerHttp extends tinyServer_base_1.TinyServerBase {
    createServer() {
        const server = (0, http_1.createServer)({
            IncomingMessage: request_1.Request,
            ServerResponse: response_1.Response
        }, async (_req, _res) => {
            const req = _req;
            const res = _res;
            const result = (await this.router.handle(req, res));
            // notfound/error
            if (!res.headersSent) {
                if (result instanceof Error) {
                    res.status(500).send.text('500: Error');
                }
                else {
                    res.status(404).send.text('404: Not Found');
                }
            }
        });
        return server;
    }
}
exports.TinyServerHttp = TinyServerHttp;
class TinyServerHttps extends tinyServer_base_1.TinyServerBase {
    createServer() {
        const server = (0, https_1.createServer)({
            key: (0, fs_1.readFileSync)('cert/localhost-privkey.pem'),
            cert: (0, fs_1.readFileSync)('cert/localhost-cert.pem'),
            IncomingMessage: request_1.Request,
            ServerResponse: response_1.Response
        }, async (_req, _res) => {
            const req = _req;
            const res = _res;
            const result = (await this.router.handle(req, res));
            // notfound/error
            if (!res.headersSent) {
                if (result instanceof Error) {
                    res.status(500).send.text('500: Error');
                }
                else {
                    res.status(404).send.text('404: Not Found');
                }
            }
        });
        return server;
    }
}
exports.TinyServerHttps = TinyServerHttps;
class TinyServerHttp2 extends tinyServer_base_1.TinyServerBase {
    createServer() {
        const server = (0, http2_1.createSecureServer)({
            allowHTTP1: true,
            key: (0, fs_1.readFileSync)('cert/localhost-privkey.pem'),
            cert: (0, fs_1.readFileSync)('cert/localhost-cert.pem'),
            Http2ServerRequest: request_1.RequestHttp2,
            Http2ServerResponse: response_1.ResponseHttp2,
            Http1IncomingMessage: request_1.Request,
            Http1ServerResponse: response_1.Response
        }, async (_req, _res) => {
            // stream will be handled by server.on('stream', ... )
            if (_req.stream)
                return;
            // return
            const req = _req;
            const res = _res;
            const result = (await this.router.handle(req, res));
            // notfound/error
            if (!res.headersSent) {
                if (result instanceof Error) {
                    res.status(500).send.text('500: Error');
                }
                else {
                    res.status(404).send.text('404: Not Found');
                }
            }
        });
        server.on('stream', async (stream, headers) => {
            const req = {
                authority: headers[':authority'],
                method: headers[':method'],
                path: headers[':path'],
                scheme: headers[':scheme'],
                headers: Object.entries(headers)
                    .filter(([key, value]) => typeof key === 'string' && !key.startsWith(':'))
                    .reduce((prev, curr) => {
                    return { ...prev, [curr[0]]: curr[1] };
                }, {}),
                stream
            };
            req.headers.host = req.authority;
            req.url = req.path;
            const res = new stream_1.Stream(stream);
            const result = (await this.router.handle(req, res));
            if (!res.headersSent) {
                if (result instanceof Error) {
                    res.status(500).send.text('500: Error');
                }
                else {
                    res.status(404).send.text('404: Not Found');
                }
            }
        });
        return server;
    }
}
exports.TinyServerHttp2 = TinyServerHttp2;
//# sourceMappingURL=tinyServer.js.map